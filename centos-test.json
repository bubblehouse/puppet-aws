{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "Auto Scaling Group",

    "Parameters": {
        "AvailabiltyZoneIds": {
            "Default": "us-east-1a",
            "Description": "Comma-separated list of availability zone IDs.",
            "Type": "CommaDelimitedList"
        },
        "PuppetAwsBranch": {
            "Default": "centos-support",
            "Description": "Branch of puppet-aws to use",
            "Type": "String"
        },
        "BaseInstanceTag": {
            "Default": "centos-test",
            "Description": "The base instance tag/hostname.",
            "Type": "String"
        },
        "EndpointDNSName": {
            "Default": "centos",
            "Description": "The domain to register for this ASGs endpoint (either an ELB or a fixed EIP).",
            "Type": "String"
        },
        "EndpointZone": {
            "Default": "centos-test.aws.logicworks.net",
            "Description": "The the zone of the endpoint.",
            "Type": "String"
        },
        "InternalDNSName": {
            "Description": "The domain to register for this ASGs endpoint (either an ELB or a fixed EIP).",
            "Type": "String",
            "Default": "centos"
        },
        "InternalDNSZone": {
            "Description": "The the zone of the endpoint.",
            "Type": "String",
            "Default": "centos-test.local"
        },
        "InstanceType": {
            "Default": "t2.micro",
            "Description": "EC2 instance type, e.g. m1.small, m1.large, etc.",
            "Type": "String"
        },
        "KeyPairName": {
            "Default": "lw-devops-master_20140923",
            "Description": "Name of an SSH Keypair to use.",
            "Type": "String"
        },
        "ManagementPublicKey": {
            "Default": "ssh-dss AAAAB3NzaC1kc3MAAACBAKrOf+aK/mZRe/TWaovHZvl3JtH1gC7DZn2O7aSjNqIviAdreZuzIDqq+mKOuJck+/zllx8eeNu5UlesR3IFezNRd9RkQXcSQe5K5nRvO++mCexPzjJrlWmFGc23NcmenchWVNg1cDHxQIBrsE7dcRdfXa8hW6THV0IeYAwTkAtLAAAAFQC7ThNKzD0o4vlvArO2JI8dS2wMvwAAAIAeamD3flIglbZeYVre1BPD9GyW7oUJr7yR7Gt0OtFe6aPK5DNzdt1fxlq1Q7zNjb71vb09cQxqrTeSfzp0UacXGMwLx5Oi34nGiOL6zaNZf8gMU2HqqeCJL1OISZ0B8BV4YSNjHPw4pZgJ8kkmOfJNNQDjsnVvZU1cQr9Xv1pqmwAAAIBnOj6bRvPuWkDcTYTqXmrCUzpx3U3lpFS65Ui/VdozlsRyuTuwjpdWDi2Tw3MjK0tDbGBhDc5z98/bKHJijaiczVx1lj2nsz7eAXZhfl3VARGOS3h0ty3pshLPGNED3LptzBlDXRtL1YqCrX2V+BM1Gy8kWD6TN07ypW0MJ/wKCg== root@dosas",
            "Description": "If present, add this as a secondary management key.",
            "Type": "String"
        },
        "DeployKey": {
            "Default": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQ0KTUlJRXBBSUJBQUtDQVFFQXdtNkVMN1pldDNGTll6eGliUHUvNHJtYmR0L1UzcVNEd0dib1BtaXUxV2VuY3JiUzV0Wmh4QzZwbzRYZg0KQWh4VlV5VUlCQkJqdXEzeWpDbVVuOWx1MlUvSm94bHg1ODR4Qk8wZVlTbml2dzM3UVc5di8rYmlpRXRsUjZhZlpzaTFyOWhUaVZieg0KQVRhakFEbHl1MnAzb210R2ZVRUhmRTA2dlIwNkNra0NMYi9XQWVacThXeDJuUERHUEpUc0N3S3ZucTFHVHFpK0NGOGR2Nm9ZOVZNcA0KWWpudnhYdGJ5NUtBajd0L3NORDZPMXBpYzJyMFpvWmRXejVzWGNCUDlHdTJqNkdQc1FKaGtwamJER2FQUXpSSDBLYTVCWGVGM2N0Vg0KdWF1WEF3YWpPc0FSajJpb0lKMjJ1TUNiWjhPQ0gveDBNbzdITFJOc0Q3MVUwSnF1M1dFekh3SURBUUFCQW9JQkFHcm80ZjVxUlFLUg0KWm9BZWYvQjFMVG01M1dZc0JaeTIwVXRHU29XbWdod045dUQ0N2xiSG90S0E1ZjVvYWd0N0VOKzdDUUZURWNOZ1NuSVBtdzJhUFgxNA0KaGVNTTVya1RnNWkxMlhLTDJZWThaZC9CS3RDSFlDQ1pkSU5GZDNqSS9ENUlzUVpmclJjSnQrOHpwNGF1TUVJNnduTzFBaXl6T28wcQ0KT1BQVzJUL1Z1U0R5ODJZaDJLRFh1TU9DQ3dneWIzRE55VXRtTUIyN0hjeHFXZTRRa0ZSSFVBaDN1WTdHWmNzdDZZSGNGQ2d3NTJYZw0KbmxuY2syT2RYYWZuejg4T1NUVkFTbUhrclVBLzNidFluL09VbS9rQjdaMjJYLzVZUzd4RFJ6NVFxM0Y0eGJzcFJ4UmE1TGV6QlRGVg0KUWU0OXhtK0JVaEZpWWxVZkhEK1UyRk5YdzhFQ2dZRUErZ1hGdVZFcngwa3U5aHJuR1RyZXgzKzZ6VU0rRm5HZFFDZTdrZmlwNEFUVg0KWitHWndMSXFvOGsyRk91d25iaFdJQXNySjNKai81dDBXd2QrUW8rZStZK3lyLzdTYlRHL1J6RUgyTDBDVmNxdGVOQkFGbnFYSzlsdQ0KT1l1aXFxNUF3dGJ0RHZmUnhGQ3B6NXNwVm9YNVpDSHZlSWl1NDY1YS94Ry94L1Z5MHFrQ2dZRUF4eFNDRXJkQ3hKNitsekQ1clI0VA0KTTE4M0t2b3pQekJoT2QwWVpWYmtrdVpHZHVZZ3UxeXg5NlZWVlEvU0pXbERvVXdJTUZYV0QyN3BkVm95aWdqVW90VDFHWHFPTUMvKw0Kck1GRWJ1TE1pQ0k3N0xJYTVLOExTVnRmbE4zR0tnakpsN2pOYTZkWS94Y1RxZnRNLzJQTDJIbGRrZHJ5d2NqSG9OdS9GVllndkljQw0KZ1lFQWdQLzFjcFpVOWkvbVVRaTBjQ29WdyswOVhxYnhJL2RlNFRrZTZFUGFza0VNTXRzTno0U2R4NEFMcldPbDd0cXJaVUVkOU81cQ0KZGZtcFlVWk9lTjFOY3dvWGNnTVNZMUNsbG4vUHdwNVMxQjBNd0NjQ3loWmFaVDk4UmFpc04xQk5EYnFDK1pRWDRTaVZWUTZEbDZicw0KZENPbVFSU1UxOWlnRHJjRHNwSUx1bkVDZ1lCdGt6UWs2UW11LzFFWUZyVFdQSCtFL3h0MlpGQmdyMWhVYVFWTWdnODlhOUhORDgxaw0KVXhrQm5kYmlBdHRBRERoVlIyd2FicVJyeWpobGgwZmFBaEpIcmI5YVRzS0VjMlpSMys2eXVkS3ArMjNRVWhmTFZ5MTNLdnZwREVoTw0KU3BmckVxUytaRlh2MGR2WTY2RHQwUmdhQm5NaUhNa1JNRm53aUFNYzAxTWhjUUtCZ1FDL3hqbmw1RlozNDRveDBCc0o5YUdtSGVHeQ0KQkcrYk90dFgwNWo2S0lIZEdSWG0vbDYzQkUxcmVVUzNxZkVVdVk3Y1oxUmJ2N2xxOTBQaVZiUWlkdU81c3kyMm1RNGxNMmtaZ3liNQ0KRE5KMVBURnhacXBOajVpdzg0U0cxeVBmbzVqTWpMNzhNR1VCQjFjaHVYajNPU1hEbmxOTFdjQzFDeTZrbG9Yd205ZzN4UT09DQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
            "NoEcho": "TRUE",
            "Description": "Base64 encoded deploy key for Logicworks Gitlab",
            "Type": "String"
        },
        "PuppetEnvironment": {
            "Default": "dev",
            "Description": "Puppet environment to add the new server to.",
            "Type": "String"
        },
        "PuppetRole": {
            "Default": "",
            "Description": "Puppet Role to add to the new server.",
            "Type": "String"
        },
        "PuppetBootstrapClassName": {
            "Default": "aws::bootstrap",
            "Description": "The bootstrap class to use to provision this instance.",
            "Type": "String"
        },
        "PuppetBootstrapShortName": {
            "Default": "aws",
            "Description": "The short name of the puppet bootstrap module.",
            "Type": "String"
        },
        "PuppetBootstrapModuleURL": {
            "Default": "ssh://git@gitlab.auto.aws.logicworks.net:44322/common-libs/puppet-aws.git",
            "Description": "A public repo to checkout the bootstrap module from.",
            "Type": "String"
        },
        "PuppetProjectVendorName": {
            "Default": "",
            "Description": "The bootstrap class to use to provision this instance.",
            "Type": "String"
        },
        "PuppetProjectShortName": {
            "Default": "",
            "Description": "The short name of the puppet bootstrap module.",
            "Type": "String"
        },
        "PuppetProjectModuleURL": {
            "Default": "",
            "Description": "A public repo to checkout the bootstrap module from.",
            "Type": "String"
        },
        "SecurityGroupIds": {
            "Default": "sg-ba2803df",
            "Description": "Comma-separated list of security group IDs for the created instances.",
            "Type": "CommaDelimitedList"
        },
        "SelectedImageId": {
            "Default": "ami-96a818fe",
            "Description": "The ID of an Ubuntu LTS 14.04 AMI to boot from, or empty to use the base image for this region.",
            "Type": "String"
        },
        "EC2SubnetIds": {
            "Default": "subnet-49837c10",
            "Description": "Comma-separated list of private subnet IDs.",
            "Type": "CommaDelimitedList"
        },
        "ELBCrossZone": {
            "Default": "true",
            "Description": "Comma-separated list of ELB security group IDs.",
            "AllowedValues" : ["true", "false"],
            "Type": "String"
        },
        "ELBList": {
            "Default": "",
            "Description": "Comma separated list of ELBs to attach the ASG to.",
            "Type": "CommaDelimitedList"
        },
        "ELB443SSLCertificateId": {
            "Default": "nil",
            "Description": "SSL Certificate ID for ELB listener 443. Only used if ELB443Protocol is https.",
            "Type": "String"
        },
        "ELB443Protocol": {
            "Default": "TCP",
            "Description": "Protocol for ELB listener 443.",
            "Type": "String"
        },
        "ELB443InstanceProtocol": {
            "Default": "TCP",
            "Description": "Protocol for ELB listener 443 to talk to the instance on.",
            "Type": "String"
        },
        "ELB443InstancePort": {
            "Default": "443",
            "Description": "Port for ELB listener 443 to talk to instances.",
            "Type": "String"
        },
        "ELBSubnetIds": {
            "Default": "",
            "Description": "To create an loadBalancer, enter a comma-separated list of public subnet IDs.",
            "Type": "CommaDelimitedList"
        },
        "ELBSecurityGroupIds": {
            "Default": "",
            "Description": "Comma-separated list of ELB security group IDs.",
            "Type": "CommaDelimitedList"
        },
        "ElasticNetworkInterfaceID": {
            "Default": "",
            "Description": "For an autoscale group of 1, attach this static interface to the instance on creation.",
            "Type": "String"
        },
        "NumInstances" : {
            "Default": 1,
            "Description": "Number of instances in this group.",
            "Type": "Number"
        },
        "NeedsPublicAddress": {
            "Default": "true",
            "Description": "If NumInstances is set to 1, does this instance need a public IP. If ENI is specified, the public address is applied to the ENI.",
            "Type": "String"
        },
        "ConfigureAsGateway" : {
            "Default": "false",
            "AllowedValues" : ["true", "false"],
            "ConstraintDescription" : "You must specify true or false.",
            "Description": "Should this instance be configured as a NAT/PAT gateway?",
            "Type": "String"
        },
        "NatCidrRange" : {
            "Default": "",
            "Description": "The range to be translated, probably this instance's VPC CIDR",
            "Type": "String"
        },
        "MountEphemeralVolume" : {
            "Default": "false",
            "AllowedValues" : ["true", "false"],
            "Description": "Mount the ephemeral volume?",
            "Type": "String"
        },
        "EphemeralMountPoint" : {
            "Default": "",
            "Description": "If mounting the ephemeral volume, specify the mount point.",
            "Type": "String"
        },
        "RootVolumeSize" : {
            "Default": "30",
            "Description": "How big should this instance's root volume be (gigabytes)?",
            "Type": "Number"
        },
        "StaticVolumeMountPoint" : {
            "Default": "/media/static",
            "Description": "Where should the static volume be mounted?",
            "Type": "String"
        },
        "StaticVolumeSize" : {
            "Default": "0",
            "Description": "How big should this instance's static volume be (gigabytes)?",
            "Type": "Number"
        },
        "StaticVolumeEncryption" : {
            "Default": "false",
            "AllowedValues" : ["true", "false"],
            "Description": "Use encryption on the static volume?",
            "Type": "String"
        },
        "StaticVolumeTag" : {
            "Default": "static-volume",
            "Description": "The tag to give the static volume.",
            "Type": "String"
        }
    },

    "Mappings" : {
        "BaseAMI" : {
            "us-east-1" : {
                "hvm" : "ami-96a818fe"
            },
            "us-west-2" : {
                "hvm" : "ami-c7d092f7"
            },
            "ap-southeast-1" : {
                "hvm" : "ami-aea582fc"
            }
        }
    },

    "Conditions" : {
        "SetManagementPublicKey" : { "Fn::Not": [{ "Fn::Equals" : [{ "Ref" : "ManagementPublicKey"}, "nil"] }] },
        "SpecifyPuppetAwsBranch" : { "Fn::Not": [{ "Fn::Equals" : [{ "Ref" : "PuppetAwsBranch"}, "master"] }] },
        "InternalDNSSet" : { "Fn::Not": [{ "Fn::Equals" : [{ "Ref" : "InternalDNSName"}, "nil"] }] },
        "UseDefaultImage" : { "Fn::Equals" : [{ "Ref" : "SelectedImageId"}, "nil"] },
        "NeedsPublicAddress" : { "Fn::And" : [
            { "Fn::Equals" : [{ "Ref" : "NumInstances"}, "1"] },
            { "Fn::Equals" : [{ "Fn::Join" : [",", { "Ref" : "ELBSubnetIds"}] }, ""] },
            { "Fn::Equals" : [{ "Fn::Join" : [",", { "Ref" : "ELBList"}] }, ""] },
            { "Fn::Equals" : [{ "Ref" : "NeedsPublicAddress"}, "true"] }
        ] },
        "AssociateStaticIpToInstance" : { "Fn::And" : [
            { "Fn::Equals" : [{ "Ref" : "NumInstances"}, "1"] },
            { "Fn::Equals" : [{ "Ref" : "NeedsPublicAddress"}, "true"] },
            { "Fn::Equals" : [{ "Fn::Join" : [",", { "Ref" : "ELBSubnetIds"}] }, ""] },
            { "Fn::Equals" : [{ "Ref" : "ElasticNetworkInterfaceID"}, ""] }
        ] },
        "NeedsStaticVolume" : { "Fn::Not": [{ "Fn::Equals" : [{ "Ref" : "StaticVolumeSize"}, "0"] }] },
        "DefRootVolumeSize" : { "Fn::Not": [{ "Fn::Equals" : [{ "Ref" : "RootVolumeSize"}, "0"] }] },
        "MountEphemeralVol" : { "Fn::And": [
          { "Fn::Equals" : [{ "Ref" : "MountEphemeralVolume"}, "true"] },
          { "Fn::Not": [{ "Fn::Equals" : [{ "Ref" : "EphemeralMountPoint"}, ""] }] }
        ]},
        "FollowAMIMounts" : { "Fn::And": [
          { "Fn::Equals" : [{ "Ref" : "RootVolumeSize"}, "0"] },
          { "Fn::Not" : [{"Condition": "MountEphemeralVol"}]}
        ]},
        "CreateLoadBalancer" : { "Fn::Not": [{ "Fn::Equals" : [{ "Fn::Join" : [",", { "Ref" : "ELBSubnetIds"}] }, ""] }] },
        "ELBListProvided" : { "Fn::Not": [{ "Fn::Equals" : [{ "Fn::Join" : [",", { "Ref" : "ELBList"}] }, ""] }] },
        "ELBSSLCertificateProvided" : { "Fn::Not": [{ "Fn::Equals" : [{ "Ref" : "ELB443SSLCertificateId"}, "nil"] }] },
        "ELBSSLProtocol" : { "Fn::Equals" : [{ "Ref" : "ELB443Protocol"}, "HTTPS"] },
        "ELBUseSSL": {"Fn::And": [{"Condition": "ELBSSLProtocol"},{"Condition": "ELBSSLCertificateProvided"}]},
        "NeedsLoadBalancer" : { "Fn::Or": [{"Condition": "ELBListProvided"}, {"Condition": "CreateLoadBalancer"}]},
        "ConfigureNAT" : { "Fn::Equals" : [{ "Ref" : "ConfigureAsGateway" }, "true"]},
        "ConfigurePuppetmaster" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PuppetProjectModuleURL"}, "" ]}]},
        "DisableSourceDestCheckOnInstance" : { "Fn::And" : [
            { "Fn::Equals" : [{ "Ref" : "ConfigureAsGateway" }, "false"]},
            { "Fn::Equals" : [{ "Ref" : "ElasticNetworkInterfaceID"}, ""] }
        ] },
        "AssociateStaticIpToInterface" : { "Fn::And" : [
            { "Fn::Equals" : [{ "Ref" : "NeedsPublicAddress"}, "true"] },
            { "Fn::Equals" : [{ "Ref" : "NumInstances"}, "1"] },
            { "Fn::Equals" : [{ "Fn::Join" : [",", { "Ref" : "ELBSubnetIds"}] }, ""] },
            { "Fn::Not": [{ "Fn::Equals" : [{ "Ref" : "ElasticNetworkInterfaceID"}, ""] }] }
        ] },
        "AttachNetworkInterface" : { "Fn::Not": [{ "Fn::Equals" : [{ "Ref" : "ElasticNetworkInterfaceID"}, ""] }] }
    },
    "Outputs": {
        "autoScaleTopic": { 
            "Value": {"Ref": "autoScaleTopic"},
            "Description": ""
        }, 
        "autoScaleQueue": { 
            "Value": {"Ref": "autoScaleQueue"},
            "Description": ""
        }
    },

    "Resources": {
        "loadBalancerRecordSetGroup" : {
            "Type" : "AWS::Route53::RecordSetGroup",
            "Condition": "CreateLoadBalancer",
            "DependsOn": ["autoScaleGroup"],
            "Properties" : {
                "HostedZoneName" : { "Fn::Join" : ["", [{ "Ref" : "EndpointZone"}, "."]] },
                "RecordSets" : [{
                    "Name" : { "Fn::Join" : ["", [{ "Ref" : "EndpointDNSName"}, ".", { "Ref" : "EndpointZone"}, "."]] },
                    "Type" : "A",
                    "AliasTarget" : {
                        "HostedZoneId" : { "Fn::GetAtt" : ["loadBalancer", "CanonicalHostedZoneNameID"] },
                        "DNSName" : { "Fn::GetAtt" : ["loadBalancer", "CanonicalHostedZoneName"] }
                    }
                }]
            }
        },
        "eipRecordSetGroup" : {
            "Type" : "AWS::Route53::RecordSetGroup",
            "Condition": "NeedsPublicAddress",
            "DependsOn": ["autoScaleGroup"],
            "Properties" : {
                "HostedZoneName" : { "Fn::Join" : ["", [{ "Ref" : "EndpointZone"}, "."]] },
                "RecordSets" : [{
                    "Name" : { "Fn::Join" : ["", [{ "Ref" : "EndpointDNSName"}, ".", { "Ref" : "EndpointZone"}, "."]] },
                    "Type" : "A",
                    "TTL": 300,
                    "ResourceRecords" : [
                        { "Ref" : "staticAddress" }
                    ]
                }]
            }
        },
        "staticAddress" : {
            "Type" : "AWS::EC2::EIP",
            "Condition": "NeedsPublicAddress",
            "Properties" : {
                "Domain" : "vpc"
            }
        },
        "staticAddressAssociation" : {
           "Type": "AWS::EC2::EIPAssociation",
           "Condition": "AssociateStaticIpToInterface",
           "Properties": {
              "AllocationId": { "Fn::GetAtt" : ["staticAddress", "AllocationId"] },
              "NetworkInterfaceId": { "Ref" : "ElasticNetworkInterfaceID" }
           }
        },
        "autoScaleQueue": {
            "Type" : "AWS::SQS::Queue",
            "Properties" : {

            }
        },
        "autoScaleSubscriptionPolicy": {
            "Type" : "AWS::SQS::QueuePolicy",
            "Properties" : {
                "Queues" : [ {"Ref" : "autoScaleQueue"} ],
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {"AWS" :"*"},
                        "Action": ["SQS:SendMessage"],
                        "Resource": "*",
                        "Sid": "autoScaleSubscriptionPolicy",
                        "Condition": {
                            "ArnEquals": {
                                "aws:SourceArn": {"Ref" : "autoScaleTopic"}
                            }
                        }
                    }]
                }
            }
        },
        "autoScaleTopic": {
            "Type" : "AWS::SNS::Topic",
            "Properties" : {
                "Subscription" : [{
                    "Endpoint" : { "Fn::GetAtt" : [ "autoScaleQueue", "Arn" ] },
                    "Protocol" : "sqs"
                }]
            }
        },
        "role": {
           "Type": "AWS::IAM::Role",
           "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    }]
                },
                "Path": "/",
                "Policies": [ {
                    "PolicyName": { "Fn::Join" : ["-", [{ "Ref" : "BaseInstanceTag"}, "role"]] },
                    "PolicyDocument": {
                        "Version" : "2012-10-17",
                        "Statement": [ {
                            "Effect": "Allow",
                            "Action": [
                                "logs:*",
                                "cloudwatch:*",
                                "ec2:ModifyInstanceAttribute",
                                "ec2:AttachNetworkInterface",
                                "ec2:AssociateAddress",
                                "ec2:AttachVolume",
                                "ec2:CreateVolume",
                                "ec2:CreateTags",
                                "ec2:DeleteTags",
                                "ec2:DescribeTags"
                            ],
                            "Resource": "*"
                        }, {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:Describe*",
                                "rds:Describe*",
                                "cloudformation:Describe*",
                                "route53:ListHostedZones",
                                {"Fn::If": ["ConfigureNAT", "route53:AssociateVPCWithHostedZone", {"Ref": "AWS::NoValue"}]},
                                {"Fn::If": ["ConfigureNAT", "route53:ListHostedZonesByName", {"Ref": "AWS::NoValue"}]},
                                {"Fn::If": ["ConfigureNAT", "route53:CreateHostedZone", {"Ref": "AWS::NoValue"}]},
                                "s3:Get*",
                                "s3:List*",
                                "sdb:GetAttributes",
                                "sdb:List*",
                                "sdb:Select*",
                                "sns:Get*",
                                "sns:List*",
                                "sqs:ListQueues",
                                "sqs:GetQueueAttributes",
                                "sqs:ReceiveMessage",
                                "autoscaling:Describe*",
                                "elasticloadbalancing:Describe*",
                                "iam:Get*",
                                "iam:List*"
                            ],
                            "Resource": "*"
                        }, {
                            "Effect": "Allow",
                            "Action": [
                                "route53:GetHostedZone",
                                "route53:ListResourceRecordSets",
                                "route53:ChangeResourceRecordSets"
                            ],
                            "Resource": "arn:aws:route53:::hostedzone/*"
                        }, {
                            "Effect": "Allow",
                            "Action": [
                                "route53:GetChange"
                            ],
                            "Resource":"arn:aws:route53:::change/*"
                        }]
                    }
                } ]
            }
        },
        "profile": {
           "Type": "AWS::IAM::InstanceProfile",
           "Properties": {
              "Path": "/",
              "Roles": [ { "Ref": "role" } ]
           }
        },
        "loadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Condition": "CreateLoadBalancer",
            "Properties": {
                "CrossZone": {"Ref": "ELBCrossZone"},
                "ConnectionDrainingPolicy": {
                   "Enabled" : true,
                   "Timeout" : 300
                },
                "HealthCheck": {
                    "HealthyThreshold": "5",
                    "Interval": "30",
                    "Target": "TCP:80",
                    "Timeout": "5",
                    "UnhealthyThreshold": "3"
                },
                "Listeners": [{
                    "InstancePort": "80",
                    "LoadBalancerPort": "80",
                    "Protocol": "HTTP"
                }, {
                    "InstancePort": {"Ref": "ELB443InstancePort"},
                    "InstanceProtocol": {"Ref": "ELB443InstanceProtocol"},
                    "LoadBalancerPort": "443",
                    "Protocol": {"Ref": "ELB443Protocol"},
                    "SSLCertificateId": {"Fn::If": ["ELBUseSSL", {"Ref": "ELB443SSLCertificateId"}, {"Ref": "AWS::NoValue"}]}
                }],
                "SecurityGroups": { "Ref": "ELBSecurityGroupIds" },
                "Subnets": { "Ref": "ELBSubnetIds" }
            }
        },
        "autoScaleGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": ["launchConfiguration"],
            "Properties": {
                "AvailabilityZones": { "Ref": "AvailabiltyZoneIds" },
                "LaunchConfigurationName": { "Ref": "launchConfiguration" },
                "LoadBalancerNames": {"Fn::If" : [
                    "NeedsLoadBalancer",
                    {"Fn::If":["ELBListProvided", {"Ref": "ELBList"}, [{"Ref": "loadBalancer"}]] },
                    {"Ref" : "AWS::NoValue"}
                ]},
                "Tags" : [ {
                     "Key" : "Name",
                     "Value" : { "Ref" : "BaseInstanceTag" },
                     "PropagateAtLaunch" : "false"
                  } ],
                "DesiredCapacity": {"Ref": "NumInstances"},
                "MinSize": "1",
                "MaxSize": {"Ref": "NumInstances"},
                "VPCZoneIdentifier": { "Ref": "EC2SubnetIds" }
            }
        },
        "launchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": ["role", "profile"],
            "Properties": {
                "ImageId": { "Fn::If" : [
                    "UseDefaultImage",
                    { "Fn::FindInMap" : [ "BaseAMI", { "Ref" : "AWS::Region" }, "hvm"]},
                    { "Ref": "SelectedImageId" }
                ]},
                "InstanceType": { "Ref": "InstanceType" },
                "AssociatePublicIpAddress": {"Fn::If" : [
                    "NeedsPublicAddress",
                    true,
                    false
                ]},
                "IamInstanceProfile": { "Fn::GetAtt": ["profile", "Arn"] },
                "KeyName": { "Ref" : "KeyPairName" },
                "BlockDeviceMappings": { "Fn::If": ["FollowAMIMounts", {"Ref": "AWS::NoValue"}, [{
                    "DeviceName" : "/dev/sda1",
                    "Ebs" : { "VolumeType": "gp2", "VolumeSize" : { "Ref" : "RootVolumeSize" } }
                }, {
                    "DeviceName" : "/dev/sdx",
                    "VirtualName" : "ephemeral0"
                }]]},
                "SecurityGroups": { "Ref": "SecurityGroupIds" },
                "UserData": { "Fn::Base64":
                    { "Fn::Join": [ "\n", [
                        "#cloud-config",
                        "mounts:",
                        {"Fn::If": [
                          "MountEphemeralVol",
                          " - [ /dev/xvdx, /media/ephemeral0, auto, \"defaults,nobootwait\", \"0\", \"2\" ]",
                          {"Ref": "AWS::NoValue"}
                          ]},
                        {"Fn::If" : [
                            "NeedsStaticVolume",
       { "Fn::Join": [ "", [" - [ /dev/xvdf, ", { "Ref" : "StaticVolumeMountPoint" }, ", auto, \"defaults,nobootwait,nofail\", \"0\", \"2\" ]\n - [ swap, null ]" ]] },
                            " - [ swap, null ]"
                        ]},
                        "apt_update: true",
                        "apt_sources:",
                        "- source: \"deb http://apt.puppetlabs.com trusty main\"",
                        "  keyid: 4BD6EC30",
                        "  filename: puppetlabs-main.list",
                        "- source: \"deb http://apt.puppetlabs.com trusty dependencies\"",
                        "  keyid: 4BD6EC30",
                        "  filename: puppetlabs-deps.list",
                        "yum_repos:",
                        "  epel-release:",
                        "    name: Extra Packages for Enterprise Linux 7 - Testing",
                        "    baseurl: http://download.fedoraproject.org/pub/epel/7/$basearch",
                        "    enabled: true",
                        "    failovermethod: priority",
                        "    gpgcheck: true",
                        "    gpgkey: http://mirror.metrocast.net/fedora/epel//RPM-GPG-KEY-EPEL-7",
                        "  puppetlabs-products:",
                        "    name: Puppet Labs Products El 7 - $basearch",
                        "    baseurl: http://yum.puppetlabs.com/el/7/products/$basearch",
                        "    gpgkey: http://yum.puppetlabs.com/RPM-GPG-KEY-puppetlabs",
                        "    gpgcheck: true",
                        "    enabled: true",
                        "  puppetlabs-deps:",
                        "    name: Puppet Labs Dependencies El 7 - $basearch",
                        "    baseurl: http://yum.puppetlabs.com/el/7/products/$basearch",
                        "    gpgkey: http://yum.puppetlabs.com/RPM-GPG-KEY-puppetlabs",
                        "    gpgcheck: true",
                        "    enabled: true",
                        "packages:",
                        " - puppet",
                        " - ruby-devel",
                        " - rubygem-bundler",
                        " - make",
                        " - automake",
                        " - gcc",
                        " - gcc-c++",
                        " - kernel-devel",
                        " - git",
                        " - python-pip",
                        " - augeas-tools",
                        " - tree",
                        " - ccze",
                        "write_files:",
                        " - path: /root/.ssh/config",
                        "   permissions: '0600'",
                        "   content: |",
                        "     StrictHostKeyChecking no",
                        "     Host *",
                        "       Cipher aes128-ctr",
                        "       MACs hmac-sha1",
                        "   owner: root:root",
                        " - path: /var/lib/cloud/data/cloudformation-stack-name",
                        "   permissions: '0600'",
                        {"Fn::Join": ["", ["   content: '", {"Ref": "AWS::StackName"}, "'"]]},
                        "   owner: root:root",
                        " - path: /root/.ssh/id_rsa",
                        "   permissions: '0600'",
                        "   encoding: b64",
                        {"Fn::Join": ["", ["   content: ", {"Ref": "DeployKey"}]]},
                        "   owner: root:root",
                        " - path: /etc/puppet/Gemfile",
                        "   content: |",
                        "     source 'https://rubygems.org'",
                        "     ",
                        "     gem 'librarian-puppet'",
                        "     gem 'aws-sdk', '>=2.0.6.pre'",
                        " - path: /etc/puppet/Puppetfile",
                        "   content: |",
                        "     forge 'https://forgeapi.puppetlabs.com'",
                        "     ",
   { "Fn::Join" : ["", ["     mod 'bootstrap-", { "Ref" : "PuppetBootstrapShortName"}, "',"]]},
   { "Fn::Join" : ["", ["       :git => '", { "Ref" : "PuppetBootstrapModuleURL"}, "'", {"Fn::If": ["SpecifyPuppetAwsBranch",",",""]}]]},
   { "Fn::If" : ["SpecifyPuppetAwsBranch", {"Fn::Join": ["", ["       :ref => '", { "Ref" : "PuppetAwsBranch"}, "'"]]}, {"Ref": "AWS::NoValue"}]},
                        " - path: /etc/puppet/hiera.yaml",
                        "   content: |",
                        "     ---",
                        "     :backends: yaml",
                        "     :yaml:",
                        "       :datadir: /etc/puppet/hiera.d",
                        "     :hierarchy: bootstrap",
                        "     :logger: puppet",
                        " - path: /etc/puppet/hiera.d/bootstrap.yaml",
                        "   content: |",
   { "Fn::Join" : ["", ["     aws::bootstrap::instance_name: \"%{::cfn_baseinstancetag}", { "Fn::If" : ["ConfigurePuppetmaster", "", "-%{::ec2_instance_slug}"]}, "\""]] },
   { "Fn::Join" : ["", ["     aws::bootstrap::instance_fqdn: \"%{::cfn_baseinstancetag}", { "Fn::If" : ["ConfigurePuppetmaster", "", "-%{::ec2_instance_slug}"]}, ".%{::cfn_internaldnszone}\""]] },
   { "Fn::Join" : ["", ["     aws::bootstrap::eip_allocation_id: ", { "Fn::If" : ["AssociateStaticIpToInstance", { "Fn::GetAtt" : ["staticAddress", "AllocationId"] }, "nil"]}]] },
   { "Fn::Join" : ["", ["     aws::bootstrap::static_volume_encryption: ", { "Ref" : "StaticVolumeEncryption" }]] },
   { "Fn::Join" : ["", ["     aws::bootstrap::static_volume_size: ", { "Ref" : "StaticVolumeSize" }]] },
   { "Fn::Join" : ["", ["     aws::bootstrap::static_volume_mountpoint: ", { "Ref" : "StaticVolumeMountPoint" }]] },
   { "Fn::Join" : ["", ["     aws::bootstrap::static_volume_tag: ", { "Ref" : "StaticVolumeTag" }]] },
   { "Fn::Join" : ["", ["     aws::bootstrap::is_nat: ", { "Fn::If" : ["ConfigureNAT", "true", "false"]}]] },
   { "Fn::Join" : ["", ["     aws::bootstrap::route53_internal_zone: ", {"Ref": "InternalDNSZone"}]] },
   { "Fn::Join" : ["", ["     aws::bootstrap::eni_interface: ", { "Fn::If" : ["AttachNetworkInterface", "eth1", "nil"]}]] },
   { "Fn::Join" : ["", ["     aws::bootstrap::nat_cidr_range: ", { "Fn::If" : ["ConfigureNAT", { "Ref" : "NatCidrRange" }, "nil"]}]] },
   { "Fn::Join" : ["", ["     aws::bootstrap::eni_id: ", { "Fn::If" : ["AttachNetworkInterface", { "Ref" : "ElasticNetworkInterfaceID" }, "nil"]}]] },
                       { "Fn::If" : [
                            "ConfigurePuppetmaster",
                            { "Fn::Join": [ "\n", [
                                "     puppet::server::passenger::ssl_cert: \"/var/lib/puppet/ssl/certs/%{::cfn_baseinstancetag}.%{::cfn_internaldnszone}.pem\"",
                                "     puppet::server::passenger::ssl_cert_key: \"/var/lib/puppet/ssl/private_keys/%{::cfn_baseinstancetag}.%{::cfn_internaldnszone}.pem\"",
           { "Fn::Join" : ["", ["     aws::foreman::base_module_vendor: ", { "Ref" : "PuppetProjectVendorName"}]] },
           { "Fn::Join" : ["", ["     aws::foreman::base_module_name: ", { "Ref" : "PuppetProjectShortName"}]] },
           { "Fn::Join" : ["", ["     aws::foreman::base_module_repo: ", { "Ref" : "PuppetProjectModuleURL"}]] },
           { "Fn::Join" : ["", ["     aws::foreman::foreman_environment: ", { "Ref" : "PuppetEnvironment"}]] }
                            ]]},
                            ""
                        ] },
                        { "Fn::If" : [
                            "SetManagementPublicKey",
                            { "Fn::Join": [ "", [
                                "ssh_authorized_keys:\n",
                                " - ", { "Ref" : "ManagementPublicKey"}
                            ]]},
                            ""
                        ] },
                        "runcmd:",
                        " - cd /etc/puppet",
                        " - bundle install",
                        " - export USER=root",
                        " - export HOME=/root/",
                        " - git config --global http.sslverify false",
                        " - chmod 600 /root/.ssh",
                        " - sed -i '2istringify_facts=false' /etc/puppet/puppet.conf",
                        " - echo n | librarian-puppet init",
                        " - librarian-puppet install --path=/etc/puppet/bootstrap-modules --verbose",
   { "Fn::Join" : ["", [" - puppet apply --color=false --modulepath=/etc/puppet/bootstrap-modules --execute 'include ", { "Ref" : "PuppetBootstrapClassName" }, "'"]]},
                        " - while [[ -f /var/lib/puppet/state/agent_catalog_run.lock ]]; do",
                        " -   sleep 10",
                        " - done",
                        " - puppet agent --test"
                    ]] }
                }
            }
        }
    }
}
